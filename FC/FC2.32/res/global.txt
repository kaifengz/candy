FC 2.32 说明：

FC语言是C语言的一个子集，实现了C语言中的一些简单的功能。

判断语句：if-else，其中else部分可有可无，并且else与其前边距其最近的且未配对的
if匹配。
循环语句：while
　　　　　do-while
判断语句与循环语句的条件可以是一般表达式或其比较式或其与或非组合。
开关语句：switch-case-default，只有整型和字符型值才能作为开关表达式，若case分
支中没有用break语句跳出，程序流程将进入下一个case分支中，default分支只能出现
在所有case分支后。
判断语句、循环语句和开关语句可以嵌套使用，在各嵌套层中，可以使用continue结束
最内层循环，使用break语句结束最内层循环或开关语句，另外可以使用return语句结束
函数，可以使用exit语句结束程序。
输入输出：使用input语句进行输入，output语句进行输出。
可以输入的对象包括：字符、整数、实数以及字符串。
可以输出的对象包括：字符、整数、实数、字符数组以及字符串。

一个程序中必须有且只能有一个void main()函数，程序将以此函数为运行起点。
一个程序中可以有多个函数，各个函数不能同名，函数可以调用已经定义或预定义的函
数（包括调用自己）。
一个函数中可以有多个参数，非数组参数采用值传递，数组参数采用地址传递。
一个函数中可以有多个变量，不同函数间变量可以重名，同一函数的同一嵌套层次内变
量不能重名，不同嵌套层次内变量可以重名。
任意标识符至多能有31个字符（过多的字符将被截去），必须是由字母或下划线打头，
字母数字下划线构成的串，区分大小写。

字符串支持转义字符："\n"表示回车符，"\t"表示横向制表符，"\""表示双引号，"\'"
表示单引号，"\0"表示字符0，"\\"表示反斜杠。

数据类型有字符型(char)、整型(int)、实型(double)、字符型一维数组([]char)、整型
一维数组([]int)、实型一维数组([]double)。
算术运算符有加(+)减(-)乘(*)除(/)余(%)，余运算(%)的左右运算数必须都是字符型或
整型。
比较运算符有等于(==)不等(!=)大于(>)大于等于(>=)小于(<)小于等于(<=)。
逻辑运算符有与(&&)或(||)非(!)。
赋值运算符有等(=)加等(+=)减等(-=)乘等(*=)除等(/=)余等(%=)，余等运算(%=)的左右
运算数必须都是字符型或整型。

编译器将忽视源代码中的所有空格、tab符、换行符（字符串和字符中不能有换行符）、
“//”开头的一行注释以及“/*”和“*/”括内的多行注释。

程序中的变量与数组的初始值均为0，函数的默认返回值为0。

库函数的预定义：
数学库：
char	abs(char   c);
int	abs(int    i);
double	abs(double d);
double	arccos(double d);
double	arcctg(double d);
double	arcsin(double d);
double	arctg(double d);
double	ch(double d);
double	cos(double d);
double	ctg(double d);
double	cth(double d);
double	exp(double d);
double	lg(double d);
double	ln(double d);
double	pow(double d1,double d2);
double	sh(double d);
double	sin(double d);
double	sqrt(double d);
double	tg(double d);
doubleth(double d);
字符串库：
int	strcmp(char []s1,char []s2);
void	strcpy(char []to,"");
void	strcpy(char []to,char []from);
int	strlen(char []s);
int	strlen("");
void	strlwr(char []s);
void	strupr(char []s);
数组库：
double	average(char []ca,int l);
double	average(int []ia,int l);
double	average(double []da,int l);
void	downsort(char []ca,int l);
void	downsort(int []ia,int l);
void	downsort(double []da,int l);
char	max(char []ca,int l);
int	max(int []ia,int l);
double	max(double []da,int l);
char	min(char []ca,int l);
int	min(int []ia,int l);
double	min(double []da,int l);
int	sum(char []ca,int l);
int	sum(int []ia,int l);
double	sum(double []da,int l);
void	upsort(char []ca,int l);
void	upsort(int []ia,int l);
void	upsort(double []da,int l);
